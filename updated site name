# Sorting Algorithm Visualizer

![](https://iili.io/HsKR7lp.png)


## Short Description ðŸ“‹

This project is a sorting algorithm visualizer built using React and Chakra UI. It allows you to visualize the step-by-step execution of various sorting algorithms such as Merge Sort, Quick Sort, Heap Sort, and Bubble Sort.

## Demo
ðŸ–¥ [Live Demo](https://sorting-algorithmm.netlify.app/)

## What Did I Learn: ðŸ“š
1. **Algorithmic Thinking:** During the implementation of sorting algorithms, I developed the ability to break down complex tasks into smaller, logical steps. This honed my skills in algorithmic thinking and provided me with a deeper understanding of how algorithms solve specific problems.

2. **Visualization Techniques:**  Creating visualizations for the sorting algorithms improved my skills in representing complex processes in a simplified and understandable manner. I learned how to visually communicate important steps and transitions, enhancing user comprehension.

3. **Modularity and Reusability:** I discovered the importance of writing sorting algorithms in a modular and reusable manner. By structuring code into functions, utilizing helper functions, and separating concerns, I improved code organization and maintainability. This approach promotes code reusability and facilitates integration into different projects.

4. **Understanding Sorting Algorithms:** Through implementing and visualizing sorting algorithms like Merge Sort, Quick Sort, Heap Sort, and Bubble Sort, I deepened my understanding of their underlying principles and approaches to sorting data.

Overall, these learnings have expanded my knowledge in algorithmic thinking, visualization techniques, modularity, and the workings of different sorting algorithms.

## Features âœ¨
- Generate a new array of random numbers
- Adjust the array size and sorting speed using the slider
- Select different sorting algorithms using tabs
- Visualize the sorting process in real-time
- Disable user interaction during the sorting process
- Display the sorted array at the end of the sorting process


## Code Structure

The project's code is organized into the following main files:

- Main.js: This file contains the main component of the application. It handles the rendering of the UI elements, user interactions, and calling the sorting algorithms based on the selected tab.

- MergeSort.js, QuickSort.js, HeapSort.js, BubbleSort.js: These files contain the implementations of the respective sorting algorithms. They provide functions for sorting the array and updating the state to visualize the sorting process.

- utility.js: This file contains utility functions used in the project, such as generating a new array, setting array element colors, calculating box dimensions, and delay functions.


## Installation

To run the Sorting Algorithm Visualizer locally, follow these steps:


1. Clone the repository:

   ```bash
   git clone <repository-url>

2. Navigate to the project directory:

   ```bash
   cd sorting-algorithm-visualizer

3. Install the dependencies:

   ```bash
   npm install

4. Start the development server:

   ```bash
   npm start
5. Open your browser and visit `http://localhost:3000` to see the application running.


### Background Design 

The background design used in this project was inspired by the following CodePen:

- [Background Design on CodePen](https://codepen.io/stack-findover/pen/eYWPwPV)


## Motivation

I undertook the Sorting Visualization Algorithm project driven by a strong curiosity and fascination with sorting algorithms. Through visual representations, I aimed to deepen my understanding, provide a valuable learning resource, and sharpen my skills in algorithmic thinking, problem-solving, and software development.
